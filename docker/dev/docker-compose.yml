version: '3.7'

services:
  nest:
    container_name: nestjs-sample
    image: node:16.15-alpine
    volumes:
      - type: bind
        source: ../../
        target: /nestjs-sample
    env_file: ../../.env
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: database
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - ${NEST_PORT}:3000
      - ${NEST_DEBUG_PORT}:9229
    working_dir: /nestjs-sample
    command: yarn run ${NEST_SCRIPT}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'netstat -tulnp | grep 3000']
      interval: 3s
      timeout: 3s
      retries: 50

  database:
    container_name: nestjs-sample-db
    image: postgres:12
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file: ../../.env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
      PGPASSWORD: ${PGPASSWORD}
      TZ: ${POSTGRES_TZ}
    # Open ${DB_PORT} on host for developers to connect if needed.
    # NOTE: nest service will NOT use this. It connects to 5432.
    ports:
      - ${DB_PORT}:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_NAME}']
      interval: 1s
      timeout: 3s
      retries: 20

  redis:
    container_name: nestjs-sample-redis
    image: redis:6.2.1-alpine
    command: redis-server --requirepass redispassword
    ports:
      - ${REDIS_PORT}:6379
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1s
      timeout: 3s
      retries: 30

volumes:
  pgdata:
